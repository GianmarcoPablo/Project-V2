generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobType {
  FULL_TIME
  PART_TIME
  FREELANCE
  INTERNSHIP
}

enum WorkMode {
  ONSITE
  REMOTE
  HYBRID
}

enum Status {
  ACTIVE
  PAUSED
  CLOSED
}

enum Plan {
  free
  premium
}

enum SubscriptionPeriod {
  monthly
  yearly
}

model User {
  id                     String                   @id @default(uuid())
  name                   String
  password               String
  email                  String                   @unique
  roles                  String[]
  customerId             String?                  @unique
  plan                   Plan                     @default(free)
  jobAdvertisement       JobAdvertisement[]
  Application            Application[]
  Company                Company[]
  SavedAdvertisementJob  SavedAdvertisementJob[]
  ReportAdvertisementJob ReportAdvertisementJob[]
  Subscription           Subscription?
}

model Subscription {
  id        String             @id @default(uuid()) @map("_id")
  userId    String             @unique
  plan      Plan
  period    SubscriptionPeriod
  startDate DateTime           @default(now())
  endDate   DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model Company {
  id               String             @id @default(uuid())
  name             String             @unique
  description      String
  logoUrl          String?
  bannerUrl        String?
  phone            String?
  address          String?
  industry         String
  isVerified       Boolean            @default(false)
  socialLinks      String[]
  website          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  User             User               @relation(fields: [userId], references: [id])
  userId           String
  JobAdvertisement JobAdvertisement[]
}

model JobAdvertisement {
  id                    String                      @id @default(uuid())
  title                 String
  description           String
  experienceLevel       String
  jobType               JobType
  workMode              WorkMode
  publishType           TypePublishJobAdvertisement
  applicationLinks      String[]
  requirements          String[]
  benefits              String[]
  languagesRequired     String[]
  status                Status                      @default(ACTIVE)
  vacancies             Int                         @default(1)
  applicationDeadline   DateTime?
  salay                 Float?
  location              String?
  workHours             String?
  additionalInformation String?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt

  userId String? // Relación con usuario, si aplica
  User   User?   @relation(fields: [userId], references: [id])

  companyId              String? // Relación con compañía, si aplica
  Company                Company?                 @relation(fields: [companyId], references: [id])
  Category               Category                 @relation(fields: [categoryId], references: [id])
  categoryId             String
  Application            Application[]
  SavedAdvertisementJob  SavedAdvertisementJob[]
  ReportAdvertisementJob ReportAdvertisementJob[]
}

model Category {
  id               String             @id @default(uuid())
  name             String             @unique
  jobAdvertisement JobAdvertisement[]
}

model Application {
  id          String            @id @default(uuid())
  userId      String
  jobId       String
  status      ApplicationStatus @default(PENDING) // Estado de la postulación
  coverLetter String? // Carta de presentación opcional
  resumeLink  String? // Enlace al CV o archivo
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  User             User             @relation(fields: [userId], references: [id])
  JobAdvertisement JobAdvertisement @relation(fields: [jobId], references: [id])
}

model SavedAdvertisementJob {
  id      String   @id @default(uuid())
  userId  String
  jobId   String
  savedAt DateTime @default(now())

  User             User             @relation(fields: [userId], references: [id])
  JobAdvertisement JobAdvertisement @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId]) // Asegura que un usuario no pueda guardar el mismo aviso más de una vez.
}

model ReportAdvertisementJob {
  id          String       @id @default(uuid())
  userId      String
  jobId       String
  reason      String // Motivo del reporte
  description String? // Descripción adicional opcional
  status      ReportStatus @default(PENDING) // Estado del reporte
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  User             User             @relation(fields: [userId], references: [id])
  JobAdvertisement JobAdvertisement @relation(fields: [jobId], references: [id])
}

enum ApplicationStatus {
  PENDING // Postulación recibida pero no revisada
  REVIEWED // Postulación revisada
  SHORTLISTED // Seleccionado para la siguiente etapa
  REJECTED // Postulación rechazada
  ACCEPTED // Aprobado para el puesto
}

enum ReportStatus {
  PENDING // Reporte en espera de revisión
  REVIEWED // Reporte revisado
  RESOLVED // Se tomaron medidas para resolver el reporte
  DISMISSED // Reporte desestimado
}

enum TypePublishJobAdvertisement {
  USER
  COMPANY
}
